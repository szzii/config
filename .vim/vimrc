let mapleader = ' '
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"
let g:ale_disable_lsp = 1
let g:ale_sign_error = '✗'
let g:ale_sign_warning = '⚡'
let g:ale_linters = {
		\ '*': ['renive_trailing_lines', 'trim_whitespace'],
		\ 'java' : ['javac']
	    \ }
let g:airline#extensions#ale#enabled = 1
let g:vimspector_enable_mappings = 'HUMAN'
let g:airline_powerline_fonts = 1
let g:airline_theme='deus'
let g:airline_solarized_bg='dark'
let g:airline#extensions#tabline#enabled = 1
let g:webdevicons_enable = 1
let g:webdevicons_enable_startify = 1
let g:webdevicons_enable_nerdtree = 1
let g:webdevicons_enable_flagship_statusline = 1
let g:WebDevIconsNerdTreeGitPluginForceVAlign = 1
let g:NERDTreeGitStatusConcealBrackets =1
let g:NERDTreeGitStatusIndicatorMapCustom = {
	                \ 'Modified'  :'✹',
                \ 'Staged'    :'✚',
                \ 'Untracked' :'✭',
                \ 'Renamed'   :'➜',
                \ 'Unmerged'  :'═',
                \ 'Deleted'   :'✖',
                \ 'Dirty'     :'✗',
                \ 'Ignored'   :'☒',
                \ 'Clean'     :'✔︎',
                \ 'Unknown'   :'?',
                \ }


"you can add these colors to your .vimrc to help customizing
let s:brown = "905532"
let s:aqua =  "3AFFDB"
let s:blue = "689FB6"
let s:darkBlue = "44788E"
let s:purple = "834F79"
let s:lightPurple = "834F79"
let s:red = "AE403F"
let s:beige = "F5C06F"
let s:yellow = "F09F17"
let s:orange = "D4843E"
let s:darkOrange = "F16529"
let s:pink = "CB6F6F"
let s:salmon = "EE6E73"
let s:green = "8FAA54"
let s:lightGreen = "31B53E"
let s:white = "FFFFFF"
let s:rspec_red = 'FE405F'
let s:git_orange = 'F54D27'
let g:NERDTreeExtensionHighlightColor = {} " this line is needed to avoiderror
let g:NERDTreeExtensionHighlightColor['css'] = s:blue " sets the color ofcss files to blue

let g:NERDTreeExactMatchHighlightColor = {} " this line is needed to avoid error
let g:NERDTreeExactMatchHighlightColor['.gitignore'] = s:git_orange " setsthe color for .gitignore files

let g:NERDTreePatternMatchHighlightColor = {} " this line is needed to avoid error
let g:NERDTreePatternMatchHighlightColor['.*_spec\.rb$'] = s:rspec_red "sets the color for files ending with _spec.rb

let g:WebDevIconsDefaultFolderSymbolColor = s:beige " sets the color for folders that did not match any rule
let g:WebDevIconsDefaultFileSymbolColor = s:blue " sets the color for files that did not match any rule



syntax enable
syntax on
set nocompatible
set number
set norelativenumber
set wrap
set showcmd
set wildmenu
set hlsearch
set incsearch
set ignorecase
set smartcase
set mouse+=a
set scrolloff=10
set encoding=utf-8
set hidden
set updatetime=100
set shortmess+=c
set tabstop=4
set softtabstop=4
set shiftwidth=4
"set autoindent
set smartindent
set background=dark 
inoremap ' ''<ESC>i
inoremap " ""<ESC>i
inoremap ( ()<ESC>i
inoremap [ []<ESC>i
inoremap { {<CR>}<ESC>O
"packadd! dracula
"colorscheme dracula
autocmd vimenter * ++nested colorscheme gruvbox



exec "nohlsearch"

filetype on
filetype indent on
filetype plugin on
filetype plugin indent on

noremap j h
noremap i k
noremap k j
noremap H I
noremap h i
noremap <C-l> $
noremap <C-J> 0
noremap <LEADER><CR> :nohlsearch<CR> 
noremap J 7h
noremap L 7l
noremap I 5k
noremap K 5j
nnoremap <c-g> :!lazygit<CR>
nnoremap tt :CocCommand explorer<CR>
nnoremap TT :CocCommand explorer<CR>
nmap <F5> <Plug>VimspectorContinue
nmap <C-m> <Plug>MarkdownPreviewToggle

map s :w<CR>
map S :w<CR>
map Q :q<CR>
map R :source $MYVIMRC<CR>
map sl :set splitright<CR>:vsplit<CR>
map sj :set nosplitright<CR>:vsplit<CR>
map si :set nosplitbelow<CR>:split<CR>
map sk :set splitbelow<CR>:split<CR>
map SL :set splitright<CR>:vsplit<CR>
map SJ :set nosplitright<CR>:vsplit<CR>
map SI :set nosplitbelow<CR>:split<CR>
map SK :set splitbelow<CR>:split<CR>
map <LEADER>j <C-w>h 
map <LEADER>i <C-w>k
map <LEADER>k <C-w>j
map <LEADER>l <C-w>l
map <LEADER>J <C-w>h 
map <LEADER>I <C-w>k
map <LEADER>K <C-w>j
map <LEADER>L <C-w>l
"map <UP> :res +5<CR>
"map <down> :res -5<CR>
"map <left> :vertical resize-5<CR>
"map <right> :vertical resize+5<CR>
map tu :tabe<CR>
map tl :+tabnext<CR>
map tj :-tabnext<CR>



" === COC ====

let g:coc_global_extensions = []


" <TAB>键代码补全
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
	  let col = col('.') - 1
	  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"


inoremap <silent><expr> <c-@> coc#refresh()

" 检查上一个或下一个错误
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" 函数跳转
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)


" 文件浏览器默认配色
au ColorScheme *
  \ hi CocExplorerNormalFloatBorder guifg=#414347 guibg=#272B34
  \ | hi CocExplorerNormalFloat guibg=#272B34
  \ | hi CocExplorerSelectUI guibg=blue


" ==== COC end ====


" 回复当前缓冲区最后一次光标退出位置
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

call plug#begin('~/.vim/plugged')

" 底部状态栏
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" vim 开始导航
Plug 'mhinz/vim-startify'

" Coc系列
Plug 'neoclide/coc.nvim', {'branch': 'release'}

" 文件管理
Plug 'ryanoasis/vim-devicons' 
Plug 'scrooloose/nerdtree-project-plugin'

" Error checking
Plug 'w0rp/ale'

" themes
Plug 'morhetz/gruvbox'
"Plug 'dracula/vim', { 'as': 'dracula' }

Plug 'sbdchd/neoformat'

" markdown
Plug 'iamcco/markdown-preview.nvim', {'do': 'cd app && yarn install'  }

" debug
Plug 'puremourning/vimspector'

Plug 'junegunn/fzf.vim'

Plug 'Yggdroot/indentLine'

call plug#end()
